<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TIMM on Dickson Neoh - Personal Portfolio</title><link>https://dicksonneoh.com/tags/timm/</link><description>Recent content in TIMM on Dickson Neoh - Personal Portfolio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Sep 2023 11:00:15 +0800</lastBuildDate><atom:link href="https://dicksonneoh.com/tags/timm/index.xml" rel="self" type="application/rss+xml"/><item><title>Convert Any Model from PyTorch Image Models (TIMM) into ONNX</title><link>https://dicksonneoh.com/blog/convert_timm_onnx/</link><pubDate>Sat, 16 Sep 2023 11:00:15 +0800</pubDate><guid>https://dicksonneoh.com/blog/convert_timm_onnx/</guid><description>âœ… Motivation Making models smaller and more efficient for edge deployment.
Torch Image Model (TIMM) from urllib.request import urlopen from PIL import Image import timm img = Image.open(urlopen( &amp;#39;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png&amp;#39; )) model = timm.create_model( &amp;#39;vit_small_patch14_dinov2.lvd142m&amp;#39;, pretrained=True, num_classes=0, # remove classifier nn.Linear ) model = model.eval() # get model specific transforms (normalization, resize) data_config = timm.data.resolve_model_data_config(model) transforms = timm.data.create_transform(**data_config, is_training=False) output = model(transforms(img).unsqueeze(0)) # output is (batch_size, num_features) shaped tensor # or equivalently (without needing to set num_classes=0) output = model.</description></item><item><title>Bringing High-Quality Image Models to Mobile: Hugging Face TIMM Meets Android &amp; iOS</title><link>https://dicksonneoh.com/portfolio/bringing_high_quality_image_models_to_mobile/</link><pubDate>Thu, 16 Mar 2023 11:00:15 +0800</pubDate><guid>https://dicksonneoh.com/portfolio/bringing_high_quality_image_models_to_mobile/</guid><description>ðŸŒŸ Motivation For many data scientist (including myself), we pride ourselves in training a model, seeing the loss graph go down, and claim victory when the test set accuracy reaches 99.99235%.
Why not?
This is the after all the juiciest part of the job. &amp;ldquo;Solving&amp;rdquo; one dataset after another, it may seem like anything around you can be conquered with a simple model.fit.
That was me two years ago.
The naive version of me thought that was all about it with machine learning (ML).</description></item><item><title>PyTorch at the Edge: Deploying Over 964 TIMM Models on Android with TorchScript and Flutter</title><link>https://dicksonneoh.com/portfolio/pytorch_at_the_edge_timm_torchscript_flutter/</link><pubDate>Tue, 07 Feb 2023 11:00:15 +0800</pubDate><guid>https://dicksonneoh.com/portfolio/pytorch_at_the_edge_timm_torchscript_flutter/</guid><description>ðŸ”¥ Motivation With various high-level libraries like Keras, Transformer, and Fastai, the barrier to training SOTA models has never been lower.
On top of that with platforms like Google Colab and Kaggle, pretty much anyone can train a reasonably good model using an old laptop or even a mobile phone (with some patience).
The question is no longer &amp;ldquo;can we train a SOTA model?&amp;rdquo;, but &amp;ldquo;what happens after that?&amp;rdquo;
Unfortunately, after getting the model trained, most people wash their hands off at this point claiming their model works.</description></item></channel></rss>