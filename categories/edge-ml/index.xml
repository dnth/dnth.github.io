<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>edge-ML on Dickson Neoh - Personal Portfolio</title><link>https://dicksonneoh.com/categories/edge-ml/</link><description>Recent content in edge-ML on Dickson Neoh - Personal Portfolio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Sep 2023 11:00:15 +0800</lastBuildDate><atom:link href="https://dicksonneoh.com/categories/edge-ml/index.xml" rel="self" type="application/rss+xml"/><item><title>Convert Any Model from PyTorch Image Models (TIMM) into ONNX</title><link>https://dicksonneoh.com/blog/convert_timm_onnx/</link><pubDate>Sat, 16 Sep 2023 11:00:15 +0800</pubDate><guid>https://dicksonneoh.com/blog/convert_timm_onnx/</guid><description>âœ… Motivation Making models smaller and more efficient for edge deployment.
Torch Image Model (TIMM) from urllib.request import urlopen from PIL import Image import timm img = Image.open(urlopen( &amp;#39;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png&amp;#39; )) model = timm.create_model( &amp;#39;vit_small_patch14_dinov2.lvd142m&amp;#39;, pretrained=True, num_classes=0, # remove classifier nn.Linear ) model = model.eval() # get model specific transforms (normalization, resize) data_config = timm.data.resolve_model_data_config(model) transforms = timm.data.create_transform(**data_config, is_training=False) output = model(transforms(img).unsqueeze(0)) # output is (batch_size, num_features) shaped tensor # or equivalently (without needing to set num_classes=0) output = model.</description></item></channel></rss>